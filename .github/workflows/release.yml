name: Release

on:
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: mcp_linux_ssh-x86_64-linux

          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: mcp_linux_ssh-x86_64-linux-musl

          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: mcp_linux_ssh-aarch64-linux

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: mcp_linux_ssh-x86_64-windows
            extension: .exe

          - target: x86_64-apple-darwin
            os: macos-latest
            name: mcp_linux_ssh-x86_64-macos

          - target: aarch64-apple-darwin
            os: macos-latest
            name: mcp_linux_ssh-aarch64-macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            sudo apt-get install -y musl-tools
          elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Configure cross-compilation environment
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/mcp_linux_ssh dist/${{ matrix.name }}
          chmod +x dist/${{ matrix.name }}

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir dist
          copy target\${{ matrix.target }}\release\mcp_linux_ssh.exe dist\${{ matrix.name }}${{ matrix.extension }}

      - name: Upload to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/${{ matrix.name }}${{ matrix.extension }}
          asset_name: ${{ matrix.name }}${{ matrix.extension }}
          asset_content_type: application/octet-stream

