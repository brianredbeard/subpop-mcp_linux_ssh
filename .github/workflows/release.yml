name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: mcp_linux_ssh-x86_64-linux
            
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: mcp_linux_ssh-x86_64-linux-musl
            
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: mcp_linux_ssh-aarch64-linux
            
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: mcp_linux_ssh-x86_64-windows
            extension: .exe
            
          - target: x86_64-apple-darwin
            os: macos-latest
            name: mcp_linux_ssh-x86_64-macos
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: mcp_linux_ssh-aarch64-macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            sudo apt-get install -y musl-tools
          elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Configure cross-compilation environment
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/mcp_linux_ssh dist/${{ matrix.name }}
          chmod +x dist/${{ matrix.name }}

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir dist
          copy target\${{ matrix.target }}\release\mcp_linux_ssh.exe dist\${{ matrix.name }}${{ matrix.extension }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: dist/${{ matrix.name }}${{ matrix.extension }}
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Create checksums
        run: |
          cd release-assets
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Extract release notes
        id: extract_notes
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract notes between the first two version headers
            awk '/^## \[?v?[0-9]/{if(++count==2) exit} count==1 && !/^## \[?v?[0-9]/{print}' CHANGELOG.md > release_notes.txt
          else
            echo "Release ${{ github.ref_name }}" > release_notes.txt
            echo "" >> release_notes.txt
            echo "Compiled binaries for Linux, Windows, and macOS." >> release_notes.txt
          fi
          echo "notes_file=release_notes.txt" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-assets/*
          body_path: ${{ steps.extract_notes.outputs.notes_file }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Also build on pull requests to test the workflow
  test-build:
    name: Test Build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Build and test
        run: |
          cargo build --release
          cargo test
